{"version":3,"sources":["../node_modules/@noble/hashes/utils.js","../../src/rpc/JrpcClient.ts","../../src/rpc/solanaRpcMiddlewares.ts","../../src/providers/injectedProviders/base/baseInjectedProvider.ts","../../src/providers/injectedProviders/base/providerHandlers.ts","../../src/providers/injectedProviders/injectedProviderProxy.ts","../../src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../../src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../../src/providers/injectedProviders/slope/providerHandlers.ts","../../src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../../src/providers/injectedProviders/solflare/providerHandlers.ts","../../src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../../src/providers/injectedProviders/sollet/providerHandlers.ts","../../src/providers/injectedProviders/torus/providerHandlers.ts","../../src/providers/injectedProviders/torus/torusInjectedProvider.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../../src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../../src/solanaWallet.ts","../node_modules/@noble/hashes/_sha2.js","../node_modules/@noble/hashes/_assert.js","../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@noble/ed25519/lib/esm/index.js","../../src/utils.ts","../../src/error.ts","../../src/struct.ts","../../src/structs/utilities.ts","../../src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../../src/structs/coercions.ts","../node_modules/@noble/secp256k1/lib/esm/index.js","../../src/utils/ed25519.ts","../../src/utils/to-buffer.ts","../../src/utils/borsh-schema.ts","../../src/publickey.ts","../../src/bpf-loader-deprecated.ts","../../src/transaction/constants.ts","../../src/transaction/expiry-custom-errors.ts","../../src/layout.ts","../../src/utils/shortvec-encoding.ts","../../src/message/legacy.ts","../../src/utils/assert.ts","../../src/transaction/legacy.ts","../../src/message/v0.ts","../../src/sysvar.ts","../../src/utils/send-and-confirm-transaction.ts","../../src/utils/sleep.ts","../../src/instruction.ts","../../src/fee-calculator.ts","../../src/utils/bigint.ts","../../src/nonce-account.ts","../../src/programs/system.ts","../../src/loader.ts","../../src/bpf-loader.ts","../../node_modules/fast-stable-stringify/index.js","../../src/epoch-schedule.ts","../../src/errors.ts","../../src/__forks__/browser/fetch-impl.ts","../../src/programs/address-lookup-table/state.ts","../../src/account-data.ts","../../src/utils/makeWebsocketUrl.ts","../../src/connection.ts","../../src/keypair.ts","../../src/programs/address-lookup-table/index.ts","../../src/programs/compute-budget.ts","../../src/programs/ed25519.ts","../../src/utils/secp256k1.ts","../../src/programs/secp256k1.ts","../../src/programs/stake.ts","../../src/programs/vote.ts","../../src/validator-info.ts","../../src/vote-account.ts","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@noble/hashes/sha512.js","../node_modules/@noble/hashes/cryptoBrowser.js","../node_modules/@noble/hashes/_u64.js","../node_modules/@solana/web3.js/node_modules/bs58/index.js","../node_modules/@solana/web3.js/node_modules/base-x/src/index.js","../node_modules/@noble/hashes/sha256.js","../node_modules/borsh/lib/index.js","../node_modules/borsh/node_modules/bs58/index.js","../node_modules/borsh/node_modules/base-x/src/index.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs","../node_modules/bigint-buffer/dist/browser.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/@noble/hashes/hmac.js","../node_modules/@web3auth/solana-provider/node_modules/bs58/index.js","../node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js"],"names":["Object","defineProperty","exports","value","randomBytes","wrapConstructorWithOpts","wrapConstructor","checkOpts","Hash","concatBytes","toBytes","utf8ToBytes","asyncLoop","nextTick","hexToBytes","bytesToHex","isLE","rotr","createView","u32","u8","crypto_1","require","arr","Uint8Array","buffer","byteOffset","byteLength","Uint32Array","Math","floor","DataView","word","shift","Error","hexes","Array","from","length","v","i","toString","padStart","uint8a","hex","TypeError","array","j","hexByte","slice","byte","Number","parseInt","isNaN","iters","tick","cb","ts","Date","now","diff","str","TextEncoder","encode","data","arrays","every","a","reduce","result","pad","set","this","_cloneInto","defaults","opts","undefined","obj","prototype","call","constructor","assign","hashConstructor","hashC","message","update","digest","tmp","outputLen","blockLen","create","hashCons","msg","bytesLength","crypto","web","getRandomValues","node","createChainIdMiddleware","chainId","req","res","next","end","method","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","fetchMiddleware","createFetchMiddleware","networkMiddleware","_ref","getAccounts","createAsyncMiddleware","request","response","accounts","_ref2","requestAccounts","targetMethod","handler","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","createRequestAccountsMiddleware","createGetAccountsMiddleware","createGenericJRPCMiddleware","BaseInjectedProvider","config","state","chainConfig","chainNamespace","CHAIN_NAMESPACES","SOLANA","_","Promise","resolve","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","push","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","BaseProvider","getBaseProviderHandlers","publicKey","bs58","ethErrors","rpc","methodNotSupported","params","transaction","display","sigData","signature","_req$params","_req$params2","invalidParams","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","connect","txMessage","invalidRequest","serializeMessage","PublicKey","decode","addSignature","custom","code","conn","Connection","sendRawTransaction","serialize","allTxns","unsignedTx","signatures","getSlopeHandlers","bind","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","sign","getSolletHandlers","getTorusHandlers","_req$params3","sendTransaction","_req$params4","_req$params5","transactions","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","rpcConnectionError","emit","on","configure","_objectSpread","setupProvider","privKey","keyPairGenerator","Keypair","fromSecretKey","Buffer","keyPair","toBase58","secretKey","partialSign","signedMsg","nacl","detached","_providerEngineProxy","sig","txns","_req$params6","tx","SolanaPrivateKeyProvider","privateKey","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","name","displayName","blockExplorer","switchSolanaChain","switchChain","_ref3","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","updateAccount","_ref4","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","signedTransaction","signedTransactions","args","SHA2","_assert_js_1","utils_js_1","padOffset","finished","pos","destroyed","view","default","exists","len","take","min","subarray","process","dataView","roundClean","out","output","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","forEach","digestInto","destroy","to","number","n","isSafeInteger","bool","b","bytes","lengths","includes","hash","instance","checkFinished","assert","checkUint8Array","uint8ArrayToBuffer","buffer_1","Layout","span","property","isInteger","offset","RangeError","rv","values","nameWithProperty","lo","Class","layout","hasOwnProperty","layout_","boundConstructor_","makeDestinationObject","writable","ExternalLayout","GreedyCount","elementSpan","rem","src","OffsetLayout","UInt","UIntBE","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","elo","Structure","fields","decodePrefixes","isArray","acc","fd","e","fsp","dest","firstOffset","lastOffset","lastWrote","fv","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","msb","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","srcBuffer","write","CString","String","srcb","copy","UTF8","maxSpan","Constant","_objectWithoutProperties","source","excluded","key","target","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","ownKeys","object","enumerableOnly","keys","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","arguments","getOwnPropertyDescriptors","defineProperties","_0n","_1n","_2n","_255n","CURVE_ORDER","CURVE","freeze","d","P","Gx","Gy","MAX_256B","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","E","G","F","H","X3","Y3","T3","T1","T2","double","add","negate","W","windows","points","p","base","window","affinePoint","equals","BASE","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","toInv","nums","inverted","num","reduceRight","invertBatch","map","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_x","_y","s","numberTo32BytesLE","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","getExtendedPublicKey","point","Signature","assertValidity","fromHex","_sha512Sync","numberTo32BytesBE","reverse","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","utils","sha512","getExtendedPublicKeySync","prepareVerification","SB","pub","finishVerification","k","kA","sync","getPublicKey","R","verify","_setWindowSize","nodeCrypto","self","TORSION_SUBGROUP","hashToPrivateScalar","randomPrivateKey","subtle","createHash","precompute","sha512Sync","configurable","val","toFailures","run","StructError","failure","failures","rest","path","join","isObject","print","JSON","stringify","shiftIterator","input","done","toFailure","context","struct","branch","type","refinement","Symbol","iterator","options","coerce","ctx","coercer","schema","valid","validator","entries","Map","Set","refiner","Struct","props","is","validate","tuples","tuple","error","define","Element","boolean","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","Structs","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","_3n","_8n","POW_2_256","beta","weistrass","x2","x3","USE_ENDOMORPHISM","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","HH","HHH","V","splitScalarEndo","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","recovery","truncateHash","normalizeSignature","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","isUint8a","hexToNumber","rBytesLeft","parseDERSignature","fromDER","numTo32b","divNearest","POW_2_128","a1","a2","c1","c2","delta","HmacDrbg","counter","hmacSha256","hmacSha256Sync","seed","hmac","hmacSync","incr","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","normalizeS","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","privateAdd","tweak","privateNegate","pointAddScalar","pointMultiply","hashToPrivateKey","sha256","messages","importKey","ckey","createHmac","sha256Sync","taggedHash","tagP","charCodeAt","tagH","taggedHashSync","ed25519","generateKeypair","privateScalar","isOnCurve","toBuffer","isBuffer","properties","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","_bn","isPublicKeyData","decoded","BN","eq","toJSON","toArrayLike","zeroPad","alloc","fromPublicKey","programId","concat","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","err","findProgramAddressSync","pubkeyData","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","Message","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","accountKeyIndexes","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","nonProgramIds","numKeys","keyCount","shortvec","instruction","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","signData","byteArray","accountCount","dataSlice","TransactionStatus","MessageV0","staticAccountKeys","compiledInstructions","addressTableLookups","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","lookup","encodedWritableIndexesLength","writableIndexes","encodedReadonlyIndexesLength","readonlyIndexes","accountKey","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","TransactionInstruction","pubkey","isSigner","isWritable","Transaction","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","accountMeta","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","pair","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","confirmTransaction","status","sleep","ms","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","u64","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","payer","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","bytesLengthPadding","_rpcEndpoint","all","objToString","objKeys","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","addresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","version","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","readonly","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","endpoint","wsEndpoint","httpHeaders","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","callback","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","rawConfig","_buildArgsAtLeastConfirmed","extra","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","includeAccounts","originalTx","_blockhashWithExpiryBlockHeight","encodedTransaction","sigVerify","logTrace","traceIndent","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","recentSlot","lookupTableAddress","bumpSeed","lookupTable","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","Ed25519Program","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","sha3","keccak_256","recoveryId","Secp256k1Program","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","_objectWithoutPropertiesLoose","sourceKeys","sha384","sha512_256","SHA512","_sha2_js_1","_u64_js_1","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","Ah","Al","Bh","Bl","Ch","Cl","Dh","Dl","Eh","El","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","rotrSH","shrSH","s0l","rotrSL","shrSL","W2h","W2l","s1h","rotrBH","s1l","rotrBL","SUMl","add4L","SUMh","add4H","sigma1h","sigma1l","CHIh","CHIl","T1ll","add5L","T1h","add5H","T1l","sigma0h","sigma0l","MAJh","MAJl","All","add3L","add3H","SHA512_256","SHA384","toBig","fromBig","U32_MASK64","le","lst","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","low","basex","module","_Buffer","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","pbegin","pend","b58","it1","it2","repeat","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","buf","maybeResize","writeUInt8","writeUInt16LE","writeBuffer","toArray","writeU32","fn","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readUInt8","readUInt16LE","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","inRange","ToDictionary","Stream","tokens","endOfStream","read","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","toLowerCase","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","ArrayBuffer","input_stream","code_points","cp","fromCharCode","codePointsToString","opt_string","stringToCodePoints","reversed","toBigIntBE","width","toBufferBE","_interopRequireDefault","Client","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","valueOf","_isNativeReflectConstruct","Super","NewTarget","_CommonClient","_super","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","WebSocketBrowserImpl","_EventEmitter","protocols","_this","socket","WebSocket","onopen","onmessage","event","onerror","onclose","reason","optionsOrCallback","send","listener","addEventListener","EventEmitter","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","CommonClient","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","timeout","ws_opts","_this2","promise","_login","mark","_callee","resp","wrap","_context","prev","sent","abrupt","stop","_listMethods","_callee2","_context2","_this3","_subscribe","_callee3","_context3","_x2","_unsubscribe","_callee4","_context4","_x3","_this4","parse","listeners","uuid","v4","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","isError","HMAC","_key","iHash","oHash","getPrototypeOf"],"mappings":"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","file":"static/js/3.c5f04908.chunk.js","sourcesContent":["\"use strict\";\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nconst crypto_1 = require(\"@noble/hashes/crypto\");\n// Cast array to different type\nconst u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.u8 = u8;\nconst u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\nexports.u32 = u32;\n// Cast array to view\nconst createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\nexports.createView = createView;\n// The rotate right (circular right shift) operation for uint32\nconst rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexports.rotr = rotr;\nexports.isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!exports.isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nfunction bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nexports.bytesToHex = bytesToHex;\n/**\n * @example hexToBytes('deadbeef')\n */\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nexports.hexToBytes = hexToBytes;\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nconst nextTick = async () => { };\nexports.nextTick = nextTick;\n// Returns control to thread each 'tick' ms to avoid blocking\nasync function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await (0, exports.nextTick)();\n        ts += diff;\n    }\n}\nexports.asyncLoop = asyncLoop;\nfunction utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexports.utf8ToBytes = utf8ToBytes;\nfunction toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\nexports.toBytes = toBytes;\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nexports.concatBytes = concatBytes;\n// For runtime check if class implements interface\nclass Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\nexports.Hash = Hash;\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nfunction checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexports.checkOpts = checkOpts;\nfunction wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexports.wrapConstructor = wrapConstructor;\nfunction wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexports.wrapConstructorWithOpts = wrapConstructorWithOpts;\n/**\n * Secure PRNG\n */\nfunction randomBytes(bytesLength = 32) {\n    if (crypto_1.crypto.web) {\n        return crypto_1.crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto_1.crypto.node) {\n        return new Uint8Array(crypto_1.crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\nexports.randomBytes = randomBytes;\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SHA2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nclass SHA2 extends utils_js_1.Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = (0, utils_js_1.createView)(this.buffer);\n    }\n    update(data) {\n        _assert_js_1.default.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = (0, utils_js_1.toBytes)(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = (0, utils_js_1.createView)(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = (0, utils_js_1.createView)(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\nexports.SHA2 = SHA2;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;\nfunction number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexports.number = number;\nfunction bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexports.bool = bool;\nfunction bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexports.bytes = bytes;\nfunction hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexports.hash = hash;\nfunction exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexports.exists = exists;\nfunction output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nexports.output = output;\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexports.default = assert;\n",null,"import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _255n = BigInt(255);\nconst CURVE_ORDER = _2n ** BigInt(252) + BigInt('27742317777372353535851937790883648493');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: _2n ** _255n - BigInt(19),\n    l: CURVE_ORDER,\n    n: CURVE_ORDER,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst MAX_256B = _2n ** BigInt(256);\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(_2n * mod(Z1 ** _2n));\n        const D = mod(a * A);\n        const E = mod(mod((X1 + Y1) ** _2n) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2 ** _2n));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= MAX_256B)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & (_2n ** _255n - _1n));\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, MAX_256B))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        x_3 = mod((DA + CB) ** _2n);\n        z_3 = mod(x_1 * (DA - CB) ** _2n);\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst POW_2_256 = _2n ** BigInt(256);\nconst CURVE = {\n    a: _0n,\n    b: BigInt(7),\n    P: POW_2_256 - _2n ** BigInt(32) - BigInt(977),\n    n: POW_2_256 - BigInt('432420386565659656852420866394968145599'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n};\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 ** _2n);\n        const B = mod(Y1 ** _2n);\n        const C = mod(B ** _2n);\n        const D = mod(_2n * (mod((X1 + B) ** _2n) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E ** _2n);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 ** _2n);\n        const Z2Z2 = mod(Z2 ** _2n);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H ** _2n);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r ** _2n - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.y & _1n ? '03' : '02';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = isUint8a(hex);\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = isUint8a(hex);\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every(isUint8a))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction isUint8a(bytes) {\n    return bytes instanceof Uint8Array;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction numTo32bStr(num) {\n    if (num > POW_2_256)\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    return hexToBytes(numTo32bStr(num));\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst POW_2_128 = _2n ** BigInt(128);\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n    const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n    const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n    const b2 = a1;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        if (typeof utils.hmacSha256Sync !== 'function')\n            throw new Error('utils.hmacSha256Sync is undefined, you need to set it');\n        const res = utils.hmacSha256Sync(this.k, ...values);\n        if (res instanceof Promise)\n            throw new Error('To use sync sign(), ensure utils.hmacSha256 is sync');\n        return res;\n    }\n    incr() {\n        if (this.counter >= 1000) {\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        }\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (isUint8a(key)) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isPub(item) {\n    const arr = isUint8a(item);\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    const hex = numTo32bStr(num);\n    return hexToBytes(hex);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction finalizeSchnorrChallenge(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nfunction hasEvenY(point) {\n    return (point.y & _1n) === _0n;\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nfunction initSchnorrSigArgs(message, privateKey, auxRand) {\n    if (message == null)\n        throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n    const m = ensureBytes(message);\n    const d0 = normalizePrivateKey(privateKey);\n    const rand = ensureBytes(auxRand);\n    if (rand.length !== 32)\n        throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    const P = Point.fromPrivateKey(d0);\n    const px = P.toRawX();\n    const d = hasEvenY(P) ? d0 : CURVE.n - d0;\n    return { m, P, px, d, rand };\n}\nfunction initSchnorrNonce(d, t0h) {\n    return numTo32b(d ^ bytesToNumber(t0h));\n}\nfunction finalizeSchnorrNonce(k0h) {\n    const k0 = mod(bytesToNumber(k0h), CURVE.n);\n    if (k0 === _0n)\n        throw new Error('sign: Creation of signature failed. k is zero');\n    const R = Point.fromPrivateKey(k0);\n    const rx = R.toRawX();\n    const k = hasEvenY(R) ? k0 : CURVE.n - k0;\n    return { R, rx, k };\n}\nfunction finalizeSchnorrSig(R, k, e, d) {\n    return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n}\nasync function schnorrSign(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, await utils.taggedHash(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(await utils.taggedHash(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = await schnorrVerify(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction schnorrSignSync(message, privateKey, auxRand = utils.randomBytes()) {\n    const { m, px, d, rand } = initSchnorrSigArgs(message, privateKey, auxRand);\n    const t = initSchnorrNonce(d, utils.taggedHashSync(TAGS.aux, rand));\n    const { R, rx, k } = finalizeSchnorrNonce(utils.taggedHashSync(TAGS.nonce, t, px, m));\n    const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, rx, px, m));\n    const sig = finalizeSchnorrSig(R, k, e, d);\n    const isValid = schnorrVerifySync(sig, m, px);\n    if (!isValid)\n        throw new Error('sign: Invalid signature produced');\n    return sig;\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !hasEvenY(R) || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = finalizeSchnorrChallenge(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    privateAdd: (privateKey, tweak) => {\n        const p = normalizePrivateKey(privateKey);\n        const t = normalizePrivateKey(tweak);\n        return numTo32b(mod(p + t, CURVE.n));\n    },\n    privateNegate: (privateKey) => {\n        const p = normalizePrivateKey(privateKey);\n        return numTo32b(CURVE.n - p);\n    },\n    pointAddScalar: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = normalizePrivateKey(tweak);\n        const Q = Point.BASE.multiplyAndAddUnsafe(P, t, _1n);\n        if (!Q)\n            throw new Error('Tweaked point at infinity');\n        return Q.toRawBytes(isCompressed);\n    },\n    pointMultiply: (p, tweak, isCompressed) => {\n        const P = Point.fromHex(p);\n        const t = bytesToNumber(ensureBytes(tweak));\n        return P.multiply(t).toRawBytes(isCompressed);\n    },\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof utils.sha256Sync !== 'function')\n            throw new Error('utils.sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = utils.sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = 2n ** 64n - 1n;\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'InitializeAccount' | 'Withdraw';\n\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha384 = exports.sha512_256 = exports.sha512 = exports.SHA512 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst _u64_js_1 = require(\"./_u64.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = _u64_js_1.default.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nclass SHA512 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);\n            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);\n            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);\n            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);\n            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);\n            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexports.SHA512 = SHA512;\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());\nexports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());\nexports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crypto = void 0;\nexports.crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add = exports.toBig = exports.split = exports.fromBig = void 0;\nconst U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexports.fromBig = fromBig;\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexports.split = split;\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\nexports.add = add;\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig: exports.toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nconst _sha2_js_1 = require(\"./_sha2.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends _sha2_js_1.SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);\n            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        _assert_js_1.default.hash(hash);\n        const key = (0, utils_js_1.toBytes)(_key);\n        this.iHash = hash.create();\n        if (!(this.iHash instanceof utils_js_1.Hash))\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        const blockLen = (this.blockLen = this.iHash.blockLen);\n        this.outputLen = this.iHash.outputLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > this.iHash.blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        _assert_js_1.default.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        _assert_js_1.default.exists(this);\n        _assert_js_1.default.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n"],"sourceRoot":""}